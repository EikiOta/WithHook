// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id           String    @id @default(cuid())
  providerAccountId String?   @unique
  nickname          String?
  profile_image     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deleted_at        DateTime? // 論理削除日時（NULLなら有効）

  // UserWordはuser_idで正しくリレーション
  userWords    UserWord[]

  // 以下は実際にはproviderAccountIdでリレーションしている
  meaningsByProviderId     Meaning[]     @relation("MeaningsByProviderId")
  memoryHooksByProviderId  MemoryHook[]  @relation("MemoryHooksByProviderId")

  @@map("users")
}

model Word {
  word_id    Int      @id @default(autoincrement())
  word       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  meanings     Meaning[]
  memory_hooks MemoryHook[]
  userWords    UserWord[]

  @@map("words")
}

model Meaning {
  meaning_id Int      @id @default(autoincrement())
  word_id    Int
  user_id    String   // 実際にはproviderAccountIdが格納されている
  meaning    String
  is_public  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime? // 論理削除日時

  // リレーション
  word      Word @relation(fields: [word_id], references: [word_id])
  // 実際にはproviderAccountIdを参照するようにリレーションを変更
  user      User @relation("MeaningsByProviderId", fields: [user_id], references: [providerAccountId])
  userWords UserWord[]

  @@map("meanings")
}

model MemoryHook {
  memory_hook_id Int      @id @default(autoincrement())
  word_id        Int
  user_id        String   // 実際にはproviderAccountIdが格納されている
  memory_hook    String
  is_public      Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  deleted_at     DateTime? // 論理削除日時

  // リレーション
  word      Word @relation(fields: [word_id], references: [word_id])
  // 実際にはproviderAccountIdを参照するようにリレーションを変更
  user      User @relation("MemoryHooksByProviderId", fields: [user_id], references: [providerAccountId])
  userWords UserWord[]

  @@map("memory_hooks")
}

model UserWord {
  user_words_id  Int         @id @default(autoincrement())
  user_id        String
  word_id        Int
  meaning_id     Int
  memory_hook_id Int?        // 記憶hookは任意
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  deleted_at     DateTime?   // 論理削除日時

  // リレーション - こちらは正しくuser_idを参照
  user       User        @relation(fields: [user_id], references: [user_id])
  word       Word        @relation(fields: [word_id], references: [word_id])
  meaning    Meaning     @relation(fields: [meaning_id], references: [meaning_id])
  memoryHook MemoryHook? @relation(fields: [memory_hook_id], references: [memory_hook_id])

  @@map("user_words")
}